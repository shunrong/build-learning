/**
 * LifecyclePlugin
 * ÊºîÁ§∫ Webpack ÂÆåÊï¥ÁöÑÁîüÂëΩÂë®Êúü
 */
class LifecyclePlugin {
  apply(compiler) {
    const logs = [];
    
    const log = (hook, message, data = {}) => {
      const timestamp = Date.now();
      const logEntry = {
        hook,
        message,
        timestamp,
        ...data
      };
      logs.push(logEntry);
      console.log(`\n[${hook}] ${message}`);
      if (Object.keys(data).length > 0) {
        console.log('  Êï∞ÊçÆ:', data);
      }
    };
    
    console.log('\n' + '='.repeat(80));
    console.log('üîÑ Webpack ÁîüÂëΩÂë®ÊúüÊºîÁ§∫');
    console.log('='.repeat(80));
    
    // === 1. ÂàùÂßãÂåñÈò∂ÊÆµ ===
    compiler.hooks.environment.tap('LifecyclePlugin', () => {
      log('environment', '‚úÖ ÁéØÂ¢ÉÂáÜÂ§á');
    });
    
    compiler.hooks.afterEnvironment.tap('LifecyclePlugin', () => {
      log('afterEnvironment', '‚úÖ ÁéØÂ¢ÉÂáÜÂ§áÂÆåÊàê');
    });
    
    compiler.hooks.entryOption.tap('LifecyclePlugin', (context, entry) => {
      log('entryOption', '‚úÖ ËØªÂèñÂÖ•Âè£ÈÖçÁΩÆ', {
        context,
        entry: typeof entry === 'string' ? entry : Object.keys(entry)
      });
    });
    
    compiler.hooks.afterPlugins.tap('LifecyclePlugin', (compiler) => {
      log('afterPlugins', '‚úÖ Êèí‰ª∂Âä†ËΩΩÂÆåÊàê', {
        pluginCount: compiler.options.plugins.length
      });
    });
    
    compiler.hooks.afterResolvers.tap('LifecyclePlugin', () => {
      log('afterResolvers', '‚úÖ Ëß£ÊûêÂô®ÂáÜÂ§áÂÆåÊàê');
    });
    
    // === 2. ÁºñËØëÂâç ===
    compiler.hooks.beforeRun.tapAsync('LifecyclePlugin', (compiler, callback) => {
      log('beforeRun', 'üöÄ ÂáÜÂ§áÂºÄÂßãÁºñËØë');
      callback();
    });
    
    compiler.hooks.run.tapAsync('LifecyclePlugin', (compiler, callback) => {
      log('run', 'üöÄ ÂºÄÂßãÁºñËØë');
      callback();
    });
    
    // === 3. ÁºñËØë‰∏≠ ===
    compiler.hooks.beforeCompile.tapAsync('LifecyclePlugin', (params, callback) => {
      log('beforeCompile', '‚öôÔ∏è  ÁºñËØëÂáÜÂ§á');
      callback();
    });
    
    compiler.hooks.compile.tap('LifecyclePlugin', (params) => {
      log('compile', '‚öôÔ∏è  ÂºÄÂßãÁºñËØë');
    });
    
    compiler.hooks.thisCompilation.tap('LifecyclePlugin', (compilation) => {
      log('thisCompilation', 'üì¶ Compilation ÂØπË±°ÂàõÂª∫');
    });
    
    compiler.hooks.compilation.tap('LifecyclePlugin', (compilation, params) => {
      log('compilation', 'üì¶ Compilation ÂáÜÂ§áÂÆåÊàê', {
        name: compilation.name
      });
      
      // === Compilation Hooks ===
      let moduleCount = 0;
      
      compilation.hooks.buildModule.tap('LifecyclePlugin', (module) => {
        moduleCount++;
        if (moduleCount <= 3) {  // Âè™ÊâìÂç∞Ââç3‰∏™
          log('buildModule', `  ‚îî‚îÄ ÊûÑÂª∫Ê®°Âùó: ${module.resource || module.identifier()}`);
        }
      });
      
      compilation.hooks.succeedModule.tap('LifecyclePlugin', (module) => {
        // ‰∏çÊâìÂç∞ÔºåÊ®°ÂùóÂ§™Â§ö
      });
      
      compilation.hooks.seal.tap('LifecyclePlugin', () => {
        log('seal', 'üîí Â∞ÅË£ÖÈò∂ÊÆµÂºÄÂßã', {
          moduleCount: compilation.modules.size
        });
      });
      
      compilation.hooks.optimize.tap('LifecyclePlugin', () => {
        log('optimize', 'üéØ ‰ºòÂåñÈò∂ÊÆµ');
      });
      
      compilation.hooks.optimizeModules.tap('LifecyclePlugin', (modules) => {
        log('optimizeModules', '  ‚îî‚îÄ ‰ºòÂåñÊ®°Âùó', {
          count: modules.size
        });
      });
      
      compilation.hooks.optimizeChunks.tap('LifecyclePlugin', (chunks) => {
        log('optimizeChunks', '  ‚îî‚îÄ ‰ºòÂåñ Chunk', {
          count: chunks.size
        });
      });
      
      compilation.hooks.beforeHash.tap('LifecyclePlugin', () => {
        log('beforeHash', '  ‚îî‚îÄ Hash ÁîüÊàêÂâç');
      });
      
      compilation.hooks.afterHash.tap('LifecyclePlugin', () => {
        log('afterHash', '  ‚îî‚îÄ Hash ÁîüÊàêÂÆåÊàê', {
          hash: compilation.hash
        });
      });
      
      compilation.hooks.afterSeal.tapAsync('LifecyclePlugin', (callback) => {
        log('afterSeal', 'üîí Â∞ÅË£ÖÂÆåÊàê');
        callback();
      });
    });
    
    compiler.hooks.make.tapAsync('LifecyclePlugin', (compilation, callback) => {
      log('make', 'üèóÔ∏è  ÂºÄÂßãÊûÑÂª∫Ê®°ÂùóÊ†ë');
      callback();
    });
    
    compiler.hooks.afterCompile.tapAsync('LifecyclePlugin', (compilation, callback) => {
      log('afterCompile', '‚úÖ ÁºñËØëÂÆåÊàê', {
        modules: compilation.modules.size,
        chunks: compilation.chunks.size
      });
      callback();
    });
    
    // === 4. ËæìÂá∫Èò∂ÊÆµ ===
    compiler.hooks.shouldEmit.tap('LifecyclePlugin', (compilation) => {
      log('shouldEmit', 'ü§î Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅËæìÂá∫');
      return true;
    });
    
    compiler.hooks.emit.tapAsync('LifecyclePlugin', (compilation, callback) => {
      const assets = Object.keys(compilation.assets);
      log('emit', 'üìù ËæìÂá∫ËµÑÊ∫êÊñá‰ª∂', {
        assetCount: assets.length,
        assets: assets.slice(0, 5)  // Âè™ÊòæÁ§∫Ââç5‰∏™
      });
      callback();
    });
    
    compiler.hooks.afterEmit.tapAsync('LifecyclePlugin', (compilation, callback) => {
      log('afterEmit', '‚úÖ ËµÑÊ∫êËæìÂá∫ÂÆåÊàê');
      callback();
    });
    
    // === 5. ÂÆåÊàê ===
    compiler.hooks.done.tap('LifecyclePlugin', (stats) => {
      const info = stats.toJson();
      const endTime = Date.now();
      const startTime = logs[0].timestamp;
      
      log('done', 'üéâ ÁºñËØëÂÖ®ÈÉ®ÂÆåÊàê', {
        time: info.time,
        modules: info.modules.length,
        chunks: info.chunks.length,
        assets: info.assets.length,
        errors: info.errors.length,
        warnings: info.warnings.length
      });
      
      console.log('\n' + '='.repeat(80));
      console.log('üìä ÁºñËØëÁªüËÆ°');
      console.log('='.repeat(80));
      console.log(`‚è±Ô∏è  ÊÄªËÄóÊó∂: ${endTime - startTime}ms`);
      console.log(`üì¶ Ê®°ÂùóÊï∞: ${info.modules.length}`);
      console.log(`üß© ChunkÊï∞: ${info.chunks.length}`);
      console.log(`üìÑ ËµÑÊ∫êÊï∞: ${info.assets.length}`);
      console.log(`‚ùå ÈîôËØØÊï∞: ${info.errors.length}`);
      console.log(`‚ö†Ô∏è  Ë≠¶ÂëäÊï∞: ${info.warnings.length}`);
      console.log('='.repeat(80) + '\n');
      
      // ÁîüÊàêÊó•ÂøóÊñá‰ª∂
      const logContent = this.generateLogReport(logs, info);
      compilation.assets['lifecycle-log.txt'] = {
        source: () => logContent,
        size: () => logContent.length
      };
      
      console.log('üìÑ ÁîüÂëΩÂë®ÊúüÊó•ÂøóÂ∑≤‰øùÂ≠òÂà∞: dist/lifecycle-log.txt\n');
    });
    
    compiler.hooks.failed.tap('LifecyclePlugin', (error) => {
      log('failed', '‚ùå ÁºñËØëÂ§±Ë¥•', {
        error: error.message
      });
    });
  }
  
  generateLogReport(logs, stats) {
    let report = '='.repeat(80) + '\n';
    report += 'Webpack ÁîüÂëΩÂë®ÊúüÊó•Âøó\n';
    report += '='.repeat(80) + '\n\n';
    
    report += `ÊûÑÂª∫Êó∂Èó¥: ${new Date().toLocaleString()}\n`;
    report += `ÊÄªËÄóÊó∂: ${stats.time}ms\n`;
    report += `Ê®°ÂùóÊï∞: ${stats.modules.length}\n`;
    report += `ChunkÊï∞: ${stats.chunks.length}\n`;
    report += `ËµÑÊ∫êÊï∞: ${stats.assets.length}\n\n`;
    
    report += '='.repeat(80) + '\n';
    report += 'ÁîüÂëΩÂë®ÊúüËØ¶ÁªÜËÆ∞ÂΩï\n';
    report += '='.repeat(80) + '\n\n';
    
    logs.forEach((log, index) => {
      report += `${index + 1}. [${log.hook}] ${log.message}\n`;
      if (log.moduleCount) {
        report += `   Ê®°ÂùóÊï∞: ${log.moduleCount}\n`;
      }
      if (log.count) {
        report += `   Êï∞Èáè: ${log.count}\n`;
      }
      report += '\n';
    });
    
    return report;
  }
}

module.exports = LifecyclePlugin;

