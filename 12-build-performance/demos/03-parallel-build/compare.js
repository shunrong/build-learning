#!/usr/bin/env node
const os = require('os');

const cpuCount = os.cpus().length;

console.log(`
┌─────────────────────────────────────────────────────────────┐
│          ⚙️ 并行构建优化效果对比                              │
└─────────────────────────────────────────────────────────────┘

💻 系统信息：
  ├─ CPU 核心数：${cpuCount}
  ├─ 使用 Worker 数量：${cpuCount - 1}
  └─ 操作系统：${os.platform()}

─────────────────────────────────────────────────────────────

📊 测试方法：

1️⃣ 单线程构建（首次）：
   $ time npm run build:single
   记录时间：___ 秒

2️⃣ 并行构建（首次）：
   $ time npm run build:parallel
   记录时间：___ 秒

3️⃣ 单线程构建（二次，有缓存）：
   $ time npm run build:single:cached
   记录时间：___ 秒

4️⃣ 并行构建（二次，有缓存）：
   $ time npm run build:parallel:cached
   记录时间：___ 秒

─────────────────────────────────────────────────────────────

📈 预期效果：

┌─────────────────┬──────────┬──────────┬──────────┐
│     场景         │ 单线程   │ 并行     │  提升    │
├─────────────────┼──────────┼──────────┼──────────┤
│ 首次构建（无缓存）│  ~20s    │  ~12s    │  -40%   │
│ 二次构建（有缓存）│  ~2s     │  ~2s     │   0%    │
└─────────────────┴──────────┴──────────┴──────────┘

💡 关键发现：
  ✅ 无缓存时：并行提升 40-60% ⚡️⚡️
  ⚠️ 有缓存时：并行无优势（缓存已经够快）
  ✅ 大型项目效果更明显

─────────────────────────────────────────────────────────────

🔍 原理对比：

单线程构建：
  主线程 → 模块1 → 模块2 → 模块3 → ... → 模块N
           ↓      ↓      ↓            ↓
          100ms  100ms  100ms       100ms
  总耗时：N × 100ms

并行构建（${cpuCount} 核）：
  线程1 → 模块1 → 模块${cpuCount + 1} → ...
  线程2 → 模块2 → 模块${cpuCount + 2} → ...
  线程3 → 模块3 → 模块${cpuCount + 3} → ...
  ...
  总耗时：N × 100ms ÷ ${cpuCount - 1} ≈ ${Math.round(100 / (cpuCount - 1))}%

理论加速比：${cpuCount - 1}x
实际加速比：1.4-1.6x（有通信开销）

─────────────────────────────────────────────────────────────

⚠️ 注意事项：

1. Worker 启动开销
   └─ 每个 Worker 启动需要 ~600ms
   └─ 小项目可能反而变慢

2. 内存占用
   └─ 每个 Worker 占用额外内存
   └─ ${cpuCount - 1} 个 Worker 大约增加 ${(cpuCount - 1) * 50}MB 内存

3. 何时使用并行？
   ✅ 大型项目（> 1000 模块）
   ✅ 无缓存构建
   ✅ 生产环境构建
   ❌ 小型项目（< 500 模块）
   ❌ 已有缓存优化
   ❌ 开发环境热更新

─────────────────────────────────────────────────────────────

🎯 结论：

并行构建适合：
  ├─ 大型项目
  ├─ CI/CD 环境（首次构建）
  └─ 无缓存场景

缓存优化更重要：
  ├─ 二次构建 -90%+ ⚡️⚡️⚡️
  ├─ 并行构建 -40-60% ⚡️⚡️
  └─ 优先使用缓存！

`);

